INTRO
    Data is printed, or logged, to the console, a panel that displays messages, with console.log().
    We can write single-line comments with // and multi-line comments between /* and */.
    There are 7 fundamental data types in JavaScript: strings, numbers, booleans, null, undefined, symbol, and object.
    Numbers are any number without quotes: 23.8879
    Strings are characters wrapped in single or double quotes: 'Sample String'
    The built-in arithmetic operators include +, -, *, /, and %.
    Objects, including instances of data types, can have properties, stored information. The properties are denoted with a . after the name of the object, for example: 'Hello'.length.
    Objects, including instances of data types, can have methods which perform actions. Methods are called by appending the object or instance with a period, the method name, and parentheses. For example: 'hello'.toUpperCase().
    We can access properties and methods by using the ., dot operator.
    Built-in objects, including Math, are collections of methods and properties that JavaScript provides.

VARIABLES
    Variables hold reusable data in a program and associate it with a name.
    Variables are stored in memory.
    The var keyword is used in pre-ES6 versions of JS.
    let is the preferred way to declare a variable when it can be reassigned, and const is the preferred way to declare a variable with a constant value.
    Variables that have not been initialized store the primitive data type undefined.
    Mathematical assignment operators make it easy to calculate a new value and assign it to the same variable.
    The + operator is used to concatenate strings including string values held in variables
    In ES6, template literals use backticks ` and ${} to interpolate values into a string.
    The typeof keyword returns the data type (as a string) of a value.
    
CONDITIONAL STATEMENTS
    An if statement checks a condition and will execute a task if that condition evaluates to true.
    if...else statements make binary decisions and execute different code blocks based on a provided condition.
    We can add more conditions using else if statements.
        let stopLight = 'yellow';
        if (stopLight === 'red') {
          console.log('Stop!');
        } else if (stopLight === 'yellow') {
          console.log('Slow down.');
        } else if (stopLight === 'green') {
          console.log('Go!');
        } else {
          console.log('Caution, unknown!');
        }
    Comparison operators, including <, >, <=, >=, ===, and !== can compare two values.
    The logical and operator, &&, or “and”, checks if both provided expressions are truthy.
    The logical operator ||, or “or”, checks if either provided expression is truthy.
    The bang operator, !, switches the truthiness and falsiness of a value.
    The ternary operator is shorthand to simplify concise if...else statements.
        var age = 26;
        var beverage = (age >= 21) ? "Beer" : "Juice";
        console.log(beverage); // "Beer"
    A switch statement can be used to simplify the process of writing multiple else if statements. The break keyword stops the remaining cases from being checked and executed in a switch statement.
        let groceryItem = 'papaya';
        switch (groceryItem) {
          case 'tomato':
            console.log('Tomatoes are $0.49');
            break;
          case 'lime':
            console.log('Limes are $1.49');
            break;
          case 'papaya':
            console.log('Papayas are $1.29');
            break;
          default:
            console.log('Invalid item');
            break;
        }

FUNCTIONS
    A function is a reusable block of code that groups together a sequence of statements to perform a specific task.
    A parameter is a named variable inside a function’s block which will be assigned the value of the argument passed in when the function is invoked.
    To return a value from a function, we use a return statement.
        function myFunction(p1, p2) {
          return p1 * p2;
        }
    ES6 introduces new ways of handling arbitrary parameters through default parameters which allow us to assign a default value to a parameter in case no argument is passed into the function.
    To define a function using function expressions:
        // ES5
        var x = function(x, y) {
           return x * y;
        }
        // ES6
        const x = (x, y) => x * y;
    It’s good to be aware of the differences between function expressions, arrow functions, and function declarations. As you program more in JavaScript, you’ll see a wide variety of how these function types are used.

ARRAYS
    Arrays are lists that store data in JavaScript.
    Arrays are created with brackets [].
    Each item inside of an array is at a numbered position, or index, starting at 0.
    We can access one item in an array using its index, with syntax like: myArray[0].
    We can also change an item in an array using its index, with syntax like myArray[0] = 'new string';
    Arrays have a length property, which allows you to see how many items are in an array.
    Arrays have their own methods, including .push() and .pop(), which add and remove items from an array, respectively.
    Arrays have many methods that perform different tasks, such as .slice() and .shift(), you can find documentation at the Mozilla Developer Network website.
    Some built-in methods are mutating, meaning the method will change the array, while others are not mutating. You can always check the documentation.
    Variables that contain arrays can be declared with let or const. Even when declared with const, arrays are still mutable. However, a variable declared with const cannot be reassigned.
    Arrays mutated inside of a function will keep that change even outside the function.
    Arrays can be nested inside other arrays.
    To access elements in nested arrays chain indices using bracket notation.
    
LOOPS
    for (let i = 0, len = cars.length, text = ""; i < len; i++) {
      text += cars[i] + "<br>";
    }

jQuery
    Adding jQuery to Your Web Pages
        <head>
            <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
            <script src="my_jquery_functions.js"></script> // for functions in separate file
        </head>
        
    jQuery Syntax
        The jQuery syntax is tailor-made for selecting HTML elements and performing some action on the element(s).
        Basic syntax is: $(selector).action()
            A $ sign to define/access jQuery
            A (selector) to "query (or find)" HTML elements
            A jQuery action() to be performed on the element(s)
        Examples:
            $(this).hide() - hides the current element.
            $("p").hide() - hides all <p> elements.
            $(".test").hide() - hides all elements with class="test".
            $("#test").hide() - hides the element with id="test".
            
    The Document Ready Event
        Document ready event is to prevent any jQuery code from running before the document is finished loading (is ready).
        $(document).ready(function(){
          // jQuery methods go here...
        });
        
        $(function(){
          // jQuery methods go here...
        });
        
    jQuery Selectors
        jQuery selectors allow you to select and manipulate HTML element(s).
        jQuery selectors are used to "find" (or select) HTML elements based on their name, id, classes, types, attributes, values of attributes and much more. It's based on the existing CSS Selectors, and in addition, it has some own custom selectors.
        All selectors in jQuery start with the dollar sign and parentheses: $().
        The element Selector: $("p")
            $(document).ready(function(){
              $("button").click(function(){
                $("p").hide();
              });
            });
        The #id Selector: $("#test")
            $(document).ready(function(){
              $("button").click(function(){
                $("#test").hide();
              });
            });
        The .class Selector $(".test")
        
    jQuery Event Methods
        In jQuery, most DOM events have an equivalent jQuery method.
        Click method
            $("p").click(function(){
              $(this).hide();
            });
        Double clik method
            $("p").dblclick(function(){
              $(this).hide();
            });
        Mouseenter method: the function is executed when the mouse pointer leaves the HTML element
            $("#p1").mouseleave(function(){
              alert("Bye! You now leave p1!");
            });
        Mousedown method: the function is executed, when the left, middle or right mouse button is pressed down, while the mouse is over the HTML element
            $("#p1").mousedown(function(){
              alert("Mouse down over p1!");
            });
        Hover method
            $("#p1").hover(function(){
              alert("You entered p1!");
            },
            function(){
              alert("Bye! You now leave p1!");
            });
            
    jQuery Effects
        jQuery hide() and show()
            $("#hide").click(function(){
              $("p").hide();
            });
            
            $("#show").click(function(){
              $("p").show();
            });
        jQuery toggle(): shown elements are hidden and hidden elements are shown
        jQuery Effects - Fading: with jQuery you can fade elements in and out of visibility.
        jQuery Animations - The animate() Method
        
    jQuery DOM Manipulation
        text() - Sets or returns the text content of selected elements
        html() - Sets or returns the content of selected elements (including HTML markup)
        val() - Sets or returns the value of form fields
        
        $("button").click(function(){
            alert("Value: " + $("#test").val());
        });
        
        $("button").click(function(){
          alert($("#w3s").attr("href")); // returns the href attr
        });

        $("#btn1").click(function(){
          $("#test1").text("Hello world!"); // sets the text
        });
        
        // old text vs new text
        $("#btn1").click(function(){
          $("#test1").text(function(i, origText){
            return "Old text: " + origText + " New text: Hello world!
            (index: " + i + ")";
          });
        });
        
    jQuery - Add Elements
        $("p").append("Some appended text."); // method inserts content AT THE END of the selected HTML elements.
        $("p").prepend("Some prepended text."); // method inserts content AT THE BEGINNING of the selected HTML elements.
        after() method inserts content AFTER the selected HTML elements.
        before() method inserts content BEFORE the selected HTML elements.
        remove() - Removes the selected element (and its child elements)
        empty() - Removes the child elements from the selected element
    
    jQuery - Get and Set CSS Classes
        $("button").click(function(){
          $("h1, h2, p").addClass("blue");
          $("div").addClass("important");
        });
        
        $("button").click(function(){
          $("h1, h2, p").toggleClass("blue"); // This method toggles between adding/removing classes from the selected elements:
        });
        
        $("p").css("background-color"); // returns CSS property
        $("p").css("background-color", "yellow"); // sets CSS property
        
    jQuery width() and height() Methods
        (...)
    
    jQuery Traversing
        $(document).ready(function(){
          $("span").parent();
        });

        $(document).ready(function(){
          $("span").parentsUntil("div");
        });
        
        $(document).ready(function(){
          $("div").children();
        });

    jQuery - AJAX
        jQuery load() Method (for .txt load)
            <!DOCTYPE html>
            <html>
            <head>
            <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
            <script>
            $(document).ready(function(){
              $("button").click(function(){
                $("#div1").load("demo_test.txt");
              });
            });
            </script>
            </head>
            <body>
            
            <div id="div1"><h2>Let jQuery AJAX Change This Text</h2></div>
            
            <button>Get External Content</button>
            
            </body>
            </html>
            
        jQuery $.get() Method
        jQuery $.post() Method














